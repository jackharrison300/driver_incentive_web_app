AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Exported by architect/package@8.1.5 on 2022-09-16T01:06:41.300Z

Parameters:
  ClientDomains:
    Type: CommaDelimitedList
    Description: Array of allowable domains for the t25users Cognito user pool
  AdminEmail: 
    Type: String
    Description: Email address for proto-administrator

Resources:
  # Cognito
  UserPool: 
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: t25users
      Policies:
        PasswordPolicy:
          MinimumLength: 8
      UsernameAttributes:
        - email
      Schema:
        - AttributeDataType: String
          Name: email
          Required: false
  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserPool
      ClientName: t25client
      GenerateSecret: false
      RefreshTokenValidity: 30      # 30 day refresh on token
      CallbackURLs: !Ref ClientDomains
      LogoutURLs: !Ref ClientDomains
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthFlows:
        - code
        - implicit
      AllowedOAuthScopes:
        - email
        - openid
        - profile
  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: t25
      UserPoolId: !Ref UserPool
  AdminUserGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      GroupName: admins
      Description: Admin user group
      Precedence: 0 # the lower number has priority if a user belongs to many groups
      UserPoolId: !Ref UserPool
  UnsponsoredDriverGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      GroupName: unsponsored_drivers
      Description: Driver users that have not been approved yet
      Precedence: 10
      UserPoolId: !Ref UserPool
  ProtoAdminUser:
    Type: AWS::Cognito::UserPoolUser
    Properties:
      Username: !Ref AdminEmail
      DesiredDeliveryMediums:
        - EMAIL
      ForceAliasCreation: true
      UserAttributes:
        - Name: email
          Value: !Ref AdminEmail
      UserPoolId: !Ref UserPool
  AttachProtoAdminUser:
    Type: AWS::Cognito::UserPoolUserToGroupAttachment
    Properties:
      GroupName: admins
      Username: !Ref AdminEmail
      UserPoolId: !Ref UserPool  


  Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Policies:
      - PolicyName: ArcGlobalPolicy
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - logs:DescribeLogStreams
            Resource: arn:aws:logs:*:*:*
      - PolicyName: ArcStaticBucketPolicy
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - s3:GetObject
            - s3:PutObject
            - s3:PutObjectAcl
            - s3:DeleteObject
            - s3:ListBucket
            Resource:
            - Fn::Sub:
              - arn:aws:s3:::${bukkit}
              - bukkit:
                  Ref: StaticBucket
            - Fn::Sub:
              - arn:aws:s3:::${bukkit}/*
              - bukkit:
                  Ref: StaticBucket
      - PolicyName: GetSecretPolicy
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action: secretsmanager:GetSecretValue
            Resource: '*'
            Condition:
              StringEquals:
                'secretsmanager:ResourceTag/team25': db
  HTTP:
    Type: AWS::Serverless::HttpApi
    Properties:
      StageName: $default
      DefinitionBody:
        openapi: 3.0.1
        info:
          title:
            Ref: AWS::StackName
        paths:
          /{proxy+}:
            get:
              x-amazon-apigateway-integration:
                payloadFormatVersion: '2.0'
                type: aws_proxy
                httpMethod: POST
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetCatchallHTTPLambda.Arn}/invocations
                connectionType: INTERNET
          /_static/{proxy+}:
            get:
              x-amazon-apigateway-integration:
                payloadFormatVersion: '1.0'
                type: http_proxy
                httpMethod: GET
                uri:
                  Fn::Sub:
                  - https://${bukkit}.s3.${AWS::Region}.amazonaws.com/{proxy}
                  - bukkit:
                      Ref: StaticBucket
                connectionType: INTERNET
                timeoutInMillis: 30000
  T25VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
  T25Subnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: T25VPC
  T25Subnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: T25VPC
  T25SubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties: 
      DBSubnetGroupDescription: 'Team 25 Subnet Group'
      DBSubnetGroupName: T25SubnetGroup
      SubnetIds: 
        - Ref: T25Subnet1
        - Ref: T25Subnet2
  DBSecret:
    Type: 'AWS::SecretsManager::Secret'
    Properties:
      Name: T25DBSecret
      Description: "DB secret with dynamically generated secret password."
      GenerateSecretString:
        SecretStringTemplate: '{"username": "t25user"}'
        GenerateStringKey: "password"
        PasswordLength: 30
        ExcludeCharacters: '"@/\'
      Tags:
      -
        Key: team25
        Value: db
  MainRDSInstance:
    Type: 'AWS::RDS::DBInstance'
    Properties:
      DBName: Team25DB
      AllocatedStorage: '20'
      DBInstanceClass: db.t4g.micro
      Engine: mysql
      MasterUsername: '{{resolve:secretsmanager:T25DBSecret:SecretString:username}}'
      MasterUserPassword: '{{resolve:secretsmanager:T25DBSecret:SecretString:password}}'
      PubliclyAccessible: true
      DBSubnetGroupName: T25SubnetGroup
    DependsOn: DBSecret
  GetCatchallHTTPLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      CodeUri: ./server
      Runtime: nodejs16.x
      Architectures:
      - x86_64
      MemorySize: 1152
      EphemeralStorage:
        Size: 512
      Timeout: 5
      Environment:
        Variables:
          DATABASE_URL:
            Fn::Join:
            - ''
            - - 'mysql://'
              - '{{resolve:secretsmanager:T25DBSecret:SecretString:username}}'
              - ':'
              - '{{resolve:secretsmanager:T25DBSecret:SecretString:password}}'
              - '@'
              - !GetAtt MainRDSInstance.Endpoint.Address
              - ':'
              - !GetAtt MainRDSInstance.Endpoint.Port
              - '/'
              - 'Team25DB'
          ARC_APP_NAME: app-default
          ARC_ENV: staging
          ARC_ROLE:
            Ref: Role
          ARC_SESSION_TABLE_NAME: jwe
          ARC_STACK_NAME:
            Ref: AWS::StackName
          ARC_STATIC_BUCKET:
            Ref: StaticBucket
      Role:
        Fn::Sub:
        - arn:aws:iam::${AWS::AccountId}:role/${roleName}
        - roleName:
            Ref: Role
      Events:
        GetCatchallHTTPEvent:
          Type: HttpApi
          Properties:
            Path: /{proxy+}
            Method: GET
            ApiId:
              Ref: HTTP
    DependsOn: DBSecret
  StaticBucket:
    Type: AWS::S3::Bucket
    Properties:
      OwnershipControls:
        Rules:
        - ObjectOwnership: BucketOwnerEnforced
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: 404.html
  StaticBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: StaticBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Action:
          - s3:GetObject
          Effect: Allow
          Principal: '*'
          Resource:
          - Fn::Sub:
            - arn:aws:s3:::${bukkit}/*
            - bukkit:
                Ref: StaticBucket
          Sid: PublicReadGetObject
Outputs:
  # Cognito
  UserPoolId:
    Description: "Cognito user pool ID"
    Value: !Ref UserPool
  UserPoolClientId:
    Description: "Cognito user pool client ID"
    Value: !Ref UserPoolClient
  AuthUrl:
    Description:
    Value: !Sub https://${UserPoolDomain}.auth.${AWS::Region}.amazoncognito.com

  API:
    Description: API Gateway (HTTP)
    Value:
      Fn::Sub:
      - https://${ApiId}.execute-api.${AWS::Region}.amazonaws.com
      - ApiId:
          Ref: HTTP
  ApiId:
    Description: API ID (ApiId)
    Value:
      Ref: HTTP
  BucketURL:
    Description: Bucket URL
    Value:
      Fn::Sub:
      - http://${bukkit}.s3-website-${AWS::Region}.amazonaws.com
      - bukkit:
          Ref: StaticBucket
